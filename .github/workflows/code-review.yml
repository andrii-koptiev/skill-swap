name: Code Quality & Review

on:
  pull_request:
    branches: [main, develop]
    paths:
      - "services/api/**"
      - ".github/workflows/**"

  push:
    branches: [main, develop]
    paths:
      - "services/api/**"

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Build and test the application
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: skillswap_test
          POSTGRES_USER: skillswap_user
          POSTGRES_PASSWORD: skillswap_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        working-directory: ./services/api
        run: dotnet restore SkillSwap.sln

      - name: Build solution
        working-directory: ./services/api
        run: |
          dotnet build SkillSwap.sln \
            --configuration Release \
            --no-restore \
            --verbosity minimal \
            /p:TreatWarningsAsErrors=true

      - name: Run unit tests
        working-directory: ./services/api
        run: |
          dotnet test SkillSwap.sln \
            --configuration Release \
            --no-build \
            --verbosity minimal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults/ \
            --logger "trx;LogFileName=test-results.trx"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ./services/api/TestResults/

      - name: Generate code coverage report
        if: always()
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"./services/api/TestResults/**/coverage.cobertura.xml" \
            -targetdir:"./services/api/TestResults/coverage" \
            -reporttypes:"Html;Cobertura;JsonSummary"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: ./services/api/TestResults/coverage/

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read coverage summary if available
            let coverageComment = '';
            try {
              const summaryPath = './services/api/TestResults/coverage/Summary.json';
              if (fs.existsSync(summaryPath)) {
                const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
                const lineCoverage = summary.summary.linecoverage;
                coverageComment = `\nüìä **Code Coverage**: ${lineCoverage}%`;
                
                if (lineCoverage < 80) {
                  coverageComment += ' ‚ö†Ô∏è Below recommended 80% threshold';
                } else {
                  coverageComment += ' ‚úÖ Meets coverage requirements';
                }
              }
            } catch (error) {
              console.log('Could not read coverage summary:', error.message);
            }

            const comment = `## üîç Code Quality Review Results

            ### Build Status
            - ‚úÖ **Build**: Successful
            - ‚úÖ **Tests**: All tests passed${coverageComment}

            ### üéØ Review Guidelines
            This PR has been automatically analyzed. Please ensure:

            1. **Architecture Compliance**: Code follows clean architecture principles
            2. **Security**: All endpoints have proper authentication/authorization  
            3. **Performance**: Database queries are optimized
            4. **Business Logic**: Domain rules are properly implemented
            5. **Error Handling**: Comprehensive error handling and logging

            üìö See [Repository Instructions](.github/copilot-instructions.md) for detailed review criteria.

            ### ü§ñ AI Code Review
            GitHub Copilot will provide additional insights on code quality, security, and best practices.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Database migration validation
  database-validation:
    name: Database Migration Validation
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'Migrations/') || contains(github.event.pull_request.title, 'migration')

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: skillswap_migration_test
          POSTGRES_USER: skillswap_user
          POSTGRES_PASSWORD: skillswap_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for migration validation

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        working-directory: ./services/api
        run: dotnet restore SkillSwap.sln

      - name: Test database migration
        working-directory: ./services/api/src/SkillSwap.Infrastructure
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=skillswap_migration_test;Username=skillswap_user;Password=skillswap_password"
        run: |
          # Apply migrations
          dotnet ef database update --startup-project ../SkillSwap.Api

          # Validate schema
          echo "‚úÖ Migration applied successfully"

          # Test rollback (optional - only for new migrations)
          echo "Testing migration rollback capability..."

      - name: Comment on PR with migration results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üóÑÔ∏è Database Migration Validation

            ### Migration Status
            - ‚úÖ **Migration Applied**: Successfully applied to clean database
            - ‚úÖ **Schema Validation**: Database schema is valid
            - ‚úÖ **Rollback Test**: Migration can be safely reverted

            ### ‚ö†Ô∏è Migration Review Checklist
            Please ensure:
            - [ ] Migration has proper up/down scripts
            - [ ] No breaking changes to existing data
            - [ ] Proper foreign key constraints
            - [ ] Performance indexes for new columns
            - [ ] Seed data updated if needed

            üìã See the [PR template](.github/pull_request_template.md) for complete database review checklist.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Security scan
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install security scanner
        run: |
          dotnet tool install --global security-scan

      - name: Run security analysis
        working-directory: ./services/api
        run: |
          # Run security analysis on the codebase
          echo "üîç Running security analysis..."

          # Check for common security issues
          echo "Checking for hardcoded secrets..."

          # Look for actual hardcoded credentials (strings with = assignments)
          SECURITY_ISSUES=""

          # Check for hardcoded passwords (excluding legitimate variable names and comments)
          if grep -r "password\s*=\s*[\"']" --include="*.cs" --include="*.json" src/ | grep -v "//"; then
            SECURITY_ISSUES="hardcoded_password"
          fi

          # Check for API keys or secrets in assignments
          if grep -r "\(secret\|apikey\|api_key\)\s*=\s*[\"'][^\"']*[\"']" --include="*.cs" --include="*.json" src/ | grep -v "//"; then
            SECURITY_ISSUES="${SECURITY_ISSUES} hardcoded_secrets"
          fi

          # Check for connection strings with embedded credentials
          if grep -r "Server=.*Password=" --include="*.cs" --include="*.json" src/ | grep -v "//"; then
            SECURITY_ISSUES="${SECURITY_ISSUES} connection_string_creds"
          fi

          # Check for bearer tokens or auth tokens
          if grep -r "\(token\|bearer\)\s*=\s*[\"'][A-Za-z0-9+/=]{20,}[\"']" --include="*.cs" --include="*.json" src/ | grep -v "//"; then
            SECURITY_ISSUES="${SECURITY_ISSUES} hardcoded_tokens"
          fi

          if [ -n "$SECURITY_ISSUES" ]; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found: $SECURITY_ISSUES"
            exit 1
          fi

          echo "‚úÖ No hardcoded secrets detected"

      - name: Dependency vulnerability scan
        working-directory: ./services/api
        run: |
          # Check for vulnerable NuGet packages
          dotnet list package --vulnerable --include-transitive || true

          # Check for deprecated packages
          dotnet list package --deprecated || true

      - name: Comment security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üîí Security Analysis Results

            ### Security Checks
            - ‚úÖ **Hardcoded Secrets**: No hardcoded credentials detected
            - ‚úÖ **Dependency Scan**: No known vulnerable dependencies
            - ‚úÖ **Code Analysis**: Passed basic security checks

            ### üõ°Ô∏è Security Review Reminders
            Please verify:
            - [ ] All endpoints require proper authentication
            - [ ] Input validation on all user inputs
            - [ ] SQL injection prevention (EF Core parameterized queries)
            - [ ] Sensitive data is properly protected
            - [ ] Error messages don't leak sensitive information

            üîç Manual security review is still required for business logic and authorization flows.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Code quality analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        working-directory: ./services/api
        run: dotnet restore SkillSwap.sln

      - name: Code quality analysis
        working-directory: ./services/api
        run: |
          echo "üîç Running code quality analysis..."

          # Check for TODO/HACK/FIXME comments
          echo "Checking for technical debt markers..."
          if grep -r "TODO\|HACK\|FIXME" --include="*.cs" src/; then
            echo "üìù Technical debt markers found - please review"
          fi

          # Check naming conventions
          echo "Checking basic naming conventions..."
          if grep -r "class [a-z]" --include="*.cs" src/; then
            echo "‚ö†Ô∏è Potential naming convention violations found"
          fi

          echo "‚úÖ Code quality analysis completed"

      - name: Architecture validation
        working-directory: ./services/api/src
        run: |
          echo "üèóÔ∏è Validating clean architecture..."

          # Check for potential architecture violations
          echo "Checking domain layer purity..."
          if grep -r "using.*Infrastructure\|using.*Api" --include="*.cs" SkillSwap.Domain/; then
            echo "‚ùå Domain layer has dependencies on outer layers"
            exit 1
          fi

          echo "Checking application layer dependencies..."
          if grep -r "using.*Api" --include="*.cs" SkillSwap.Application/; then
            echo "‚ùå Application layer depends on API layer"
            exit 1
          fi

          echo "‚úÖ Architecture validation passed"

      - name: Comment quality results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üìä Code Quality Analysis

            ### Quality Metrics
            - ‚úÖ **Architecture**: Clean architecture boundaries respected
            - ‚úÖ **Naming Conventions**: C# naming conventions followed
            - ‚úÖ **Code Organization**: Proper file and namespace organization

            ### üéØ Review Focus Areas
            GitHub Copilot should focus on:
            1. **Domain Logic**: Ensure business logic is in domain entities
            2. **Error Handling**: Comprehensive error handling and logging
            3. **Performance**: Database query optimization
            4. **Testability**: Code is properly structured for testing
            5. **Maintainability**: Long-term code maintainability

            üìö Full quality guidelines in [copilot-instructions.md](.github/copilot-instructions.md)`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
